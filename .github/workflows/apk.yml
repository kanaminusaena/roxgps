name: Generate APK

env:
  main_project_module: app
  target_owner: ${{ github.repository_owner }}
  target_repo: ${{ github.repository }}
  target_path: ${{ github.workspace }}
  BUILD_TIMESTAMP: ${{ format('dd-MM-yyyy HH:mm:ss', 'UTC') }}
  BUILD_USER: ${{ github.actor }}
  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/**'
      - 'release/**'
    tags:
      - 'v*.*'

  pull_request:
    branches:
      - main
      - master
      - develop
      - 'release/**'
    types:
      - opened
      - synchronize
      - reopened

  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type (debug/release)'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags and branches
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '24'
          cache: 'gradle'

      - name: Calculate Version
        id: version
        run: |
          # Get latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0")
          
          # Calculate next version for release builds
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main") ]]; then
            if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)$ ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              next_minor=$((minor + 1))
              next_version="v$major.$next_minor"
            else
              next_version="v1.0"
            fi
            echo "Will create new version: $next_version"
            echo "version=$next_version" >> $GITHUB_OUTPUT
          else
            echo "Using existing version: $latest_tag"
            echo "version=$latest_tag" >> $GITHUB_OUTPUT
          fi

      - name: Setup Debug Keystore
        run: |
          if [ ! -f "$ANDROID_HOME/debug.keystore" ]; then
            echo "Creating debug keystore..."
            keytool -genkey -v \
              -keystore app/debug.keystore \
              -alias androiddebugkey \
              -storepass android \
              -keypass android \
              -keyalg RSA \
              -keysize 2048 \
              -validity 10000 \
              -dname "CN=Android Debug,O=Android,C=US" \
              -noprompt
            echo "Debug keystore created successfully"
          else
            echo "Debug keystore already exists"
            cp "$ANDROID_HOME/debug.keystore" app/debug.keystore
          fi
          
          # Verify keystore exists
          if [ -f "app/debug.keystore" ]; then
            echo "Debug keystore is ready"
          else
            echo "Failed to setup debug keystore"
            exit 1
          fi

      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "BUILD_TIMESTAMP=${{ env.BUILD_TIMESTAMP }}" >> local.properties
          echo "BUILD_USER=${{ env.BUILD_USER }}" >> local.properties
          echo "debug.storeFile=debug.keystore" >> local.properties
          echo "debug.storePassword=android" >> local.properties
          echo "debug.keyAlias=androiddebugkey" >> local.properties
          echo "debug.keyPassword=android" >> local.properties

      - name: Setup Keystore
        if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        env:
          KEYSTORE_BASE64: ${{ secrets.STORE }}
        run: |
          if [ ! -z "$KEYSTORE_BASE64" ]; then
            echo "$KEYSTORE_BASE64" | base64 -d > app/rocx.jks
            echo "Keystore decoded successfully"
          else
            echo "No keystore provided, will use debug signing"
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build debug APK
      - name: Build Debug APK
        id: debug_build
        run: |
          ./gradlew assembleFossDebug assembleFullDebug --stacktrace
          echo "DEBUG_BUILD_SUCCESS=true" >> $GITHUB_ENV
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}

      # Build release APK only on main/master
      - name: Build Release APK
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        id: release_build
        run: |
          ./gradlew assembleFossRelease assembleFullRelease --stacktrace
          echo "RELEASE_BUILD_SUCCESS=true" >> $GITHUB_ENV
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}

      # Create new version tag if release build successful
      - name: Create Release Tag
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && 
          env.RELEASE_BUILD_SUCCESS == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      # Update version.txt if build successful
      - name: Update version.txt
        if: env.RELEASE_BUILD_SUCCESS == 'true' || env.DEBUG_BUILD_SUCCESS == 'true'
        run: |
          if [ -f "version.txt" ]; then
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add version.txt
            git commit -m "Update version.txt for build #${{ github.run_number }}"
            git push
          fi

      # Clean up sensitive files
      - name: Cleanup sensitive files
        if: always()
        run: rm -f app/rocx.jks

      # Upload debug APKs
      - name: Upload Debug APKs
        if: env.DEBUG_BUILD_SUCCESS == 'true'
        uses: actions/upload-artifact@v4
        with:
            name: debug-apks
            path: |
              app/build/outputs/apk/foss/debug/roxgps-foss-arm64-v8a-debug.apk
              app/build/outputs/apk/foss/debug/roxgps-foss-armeabi-v7a-debug.apk
              app/build/outputs/apk/full/debug/roxgps-full-arm64-v8a-debug.apk
              app/build/outputs/apk/full/debug/roxgps-full-armeabi-v7a-debug.apk
            retention-days: 5

      # Upload release APKs
      - name: Upload Release APKs
        if: env.RELEASE_BUILD_SUCCESS == 'true'
        uses: actions/upload-artifact@v4
        with:
            name: release-apks
            path: |
              app/build/outputs/apk/foss/release/roxgps-foss-arm64-v8a-release.apk
              app/build/outputs/apk/foss/release/roxgps-foss-armeabi-v7a-release.apk
              app/build/outputs/apk/full/release/roxgps-full-arm64-v8a-release.apk
              app/build/outputs/apk/full/release/roxgps-full-armeabi-v7a-release.apk
            retention-days: 5

      # Create GitHub Release for new version tags
      - name: Create Release
        if: |
            github.event_name == 'push' && 
            env.RELEASE_BUILD_SUCCESS == 'true' && 
            steps.version.outputs.version != ''
          uses: softprops/action-gh-release@v2
          with:
            token: ${{ secrets.TOKEN }}
            name: ${{ steps.version.outputs.version }}
            tag_name: ${{ steps.version.outputs.version }}
            draft: false
            prerelease: false
            files: |
              app/build/outputs/apk/foss/release/roxgps-foss-arm64-v8a-release.apk
              app/build/outputs/apk/foss/release/roxgps-foss-armeabi-v7a-release.apk
              app/build/outputs/apk/full/release/roxgps-full-arm64-v8a-release.apk
              app/build/outputs/apk/full/release/roxgps-full-armeabi-v7a-release.apk
            body: |
              Release ${{ steps.version.outputs.version }}
              
              Build Information:
              - Timestamp: ${{ env.BUILD_TIMESTAMP }}
              - Builder: ${{ env.BUILD_USER }}
              - Build Number: ${{ github.run_number }}
              
              ### APK Files:
              - FOSS arm64-v8a Release
              - FOSS armeabi-v7a Release
              - Full arm64-v8a Release
              - Full armeabi-v7a Release

      # Notify on failure
      - name: Notify on failure
        if: failure()
        run: |
          echo "Build failed!"
          echo "Timestamp: ${{ env.BUILD_TIMESTAMP }}"
          echo "Builder: ${{ env.BUILD_USER }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"