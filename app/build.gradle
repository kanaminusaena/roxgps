// app/build.gradle

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'com.google.dagger.hilt.android'
    id 'org.jetbrains.kotlin.plugin.parcelize'
    id 'com.google.devtools.ksp'
    id 'com.google.protobuf'
    id 'org.jetbrains.kotlin.plugin.compose'

    // --- Plugin manajemen dependensi dan versi ---
    //id 'com.autonomousapps.dependency-analysis' // Plugin analisis dependensi
    //id 'com.github.ben-manes.versions' version '0.52.0' // Dependency updates checker
    //id 'nl.littlerobots.version-catalog-update' // Version catalog updater (Should be applied to the root project only)

    // --- Ganti plugin Git Versioning yang lama dengan yang baru ini ---
    id 'org.danilopianini.git-sensitive-semantic-versioning' version '5.1.3' // CEK VERSI TERBARU DI GRADLE PLUGIN PORTAL
}

// --- Helper functions untuk versioning dan build info (Di level teratas file) ---
static def getCurrentTimestamp() {
    return new Date().format("dd-MM-yyyy HH:mm:ss", TimeZone.getTimeZone("UTC"))
}

static def getCurrentUser() {
    return System.getenv('GITHUB_ACTOR') ?: System.getProperty('user.name') ?: 'kanaminusaena'
}

// --- FUNGSI GIT KUSTOM SUDAH DIHAPUS ---
// getGitTagVersionProvider() dan getLatestGitTagRawProvider() tidak lagi ada di sini.

def getBuildNumber() {
    def ciBuildNum = System.getenv('GITHUB_RUN_NUMBER') ?: System.getenv('CI_PIPELINE_IID')
    if (ciBuildNum) {
        return ciBuildNum as int
    }

    def buildFile = file('build-number.txt')
    def buildNumber = 1

    if (buildFile.exists()) {
        try {
            buildNumber = buildFile.text.trim() as int
        } catch (NumberFormatException ignored) {
            logger.warn("Invalid build number in build-number.txt: ${buildFile.text.trim()}. Defaulting to 1.")
            buildNumber = 1
        }
    }
    return buildNumber
}

static def updateVersionInfo(String versionStringForInfo, String buildNumberForInfo) {
    def timestamp = getCurrentTimestamp()
    def user = getCurrentUser()
    def isCI = System.getenv('CI') != null
    def buildType = isCI ? "CI/CD" : "Local"

    def versionInfoContent = """Version: ${versionStringForInfo}
Build Number: ${buildNumberForInfo}
Build Type: ${buildType}
Build Date: ${timestamp}
Built By: ${user}
"""
    return [
            version: versionStringForInfo,
            buildNumber: buildNumberForInfo,
            timestamp: timestamp,
            user: user,
            buildType: buildType,
            versionInfoContent: versionInfoContent
    ]
}

// --- Variabel Global untuk Versioning ---
// Gunakan `project.version` yang disediakan oleh plugin `DanySK/git-sensitive-semantic-versioning`.
// Plugin ini akan mengisi `project.version` berdasarkan Git tag Anda secara otomatis dan aman untuk Configuration Cache.
def baseAppVersion = project.version.toString() ?: "1.0.0" // Pastikan ini string dan berikan default yang sesuai dengan semver
def globalBuildNumber = getBuildNumber()
def globalBuildInfo = updateVersionInfo("v${baseAppVersion}", globalBuildNumber.toString())


android {
    compileSdk 35
    namespace "com.roxgps"

    defaultConfig {
        applicationId "com.roxgps"
        minSdk 30
        targetSdk 35

        versionCode globalBuildNumber
        versionName "v${baseAppVersion}" // Menggunakan `project.version`

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "APP_VERSION", "\"${baseAppVersion}\""
        buildConfigField "String", "TAG_NAME", "\"v${baseAppVersion}\""
        buildConfigField "String", "BUILD_INFO", "\"Build #${globalBuildInfo.buildNumber} (${globalBuildInfo.buildType})\""
        buildConfigField "String", "BUILD_TIMESTAMP", "\"${globalBuildInfo.timestamp}\""
        buildConfigField "String", "BUILD_USER", "\"${globalBuildInfo.user}\""
        buildConfigField "String", "BUILD_NUMBER", "\"${globalBuildInfo.buildNumber}\""
        buildConfigField "String", "BUILD_TYPE", "\"${globalBuildInfo.buildType}\""
        buildConfigField "boolean", "DEBUG_BUILD", "false"
    }

    splits {
        abi {
            enable = true
            reset()
            //noinspection ChromeOsAbiSupport
            include "armeabi-v7a", "arm64-v8a"
            universalApk = false
        }
    }

    lintOptions {
        checkReleaseBuilds = true
        abortOnError = true
        warningsAsErrors = true
        quiet = false
    }

    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }

    signingConfigs {
        release {
            if (System.getenv("KEYSTORE_PASSWORD") != null) {
                storeFile file("rocx.jks")
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            } else {
                try {
                    def keystorePropertiesFile = rootProject.file("local.properties")
                    def keystoreProperties = new Properties()
                    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                    storeFile file(keystoreProperties['storeFile'])
                    storePassword keystoreProperties['storePassword']
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                } catch (Exception ignored) {
                    logger.warn('Release signing config tidak ditemukan dari environment variables atau local.properties. Release build akan menggunakan debug signing default.')
                    storeFile file('debug.keystore')
                    storePassword 'android'
                    keyAlias 'androiddebugkey'
                    keyPassword 'android'
                }
            }
        }
        debug {
            try {
                def keystorePropertiesFile = rootProject.file("local.properties")
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                if (keystoreProperties['debug.storeFile']) {
                    storeFile file(keystoreProperties['debug.storeFile'])
                    storePassword keystoreProperties['debug.storePassword']
                    keyAlias keystoreProperties['debug.keyAlias']
                    keyPassword keystoreProperties['debug.keyPassword']
                } else {
                    storeFile file('debug.keystore')
                    storePassword 'android'
                    keyAlias 'androiddebugkey'
                    keyPassword 'android'
                }
            } catch (Exception ignored) {
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }

    buildTypes {
        release {
            // Gunakan project.version untuk release
            def releaseSpecificVersion = project.version.toString() ?: "1.0.0"
            def releaseBuildInfo = updateVersionInfo("v${releaseSpecificVersion}", globalBuildNumber.toString())

            buildConfigField "String", "APP_VERSION", "\"${releaseSpecificVersion}\""
            buildConfigField "String", "TAG_NAME", "\"v${releaseSpecificVersion}\""
            buildConfigField "String", "BUILD_INFO", "\"Build #${releaseBuildInfo.buildNumber} (${releaseBuildInfo.buildType})\""
            buildConfigField "boolean", "DEBUG_BUILD", "false"

            minifyEnabled = true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
            buildConfigField "boolean", "ENABLE_PROFILER", "false"
            buildConfigField "boolean", "ENABLE_DEBUG_LOGGING", "false"

            manifestPlaceholders = [
                    enableStrictMode: "false",
                    enableDebugTools: "false"
            ]
        }

        debug {
            // Untuk debug, kita bisa gunakan project.version juga atau default "1.0.0" jika tidak ada tag
            def debugAppVersion = project.version.toString() ?: "1.0.0"

            def debugBuildInfo = updateVersionInfo("v${debugAppVersion}-DEBUG", globalBuildNumber.toString())

            buildConfigField "String", "APP_VERSION", "\"${debugAppVersion}-dev\""
            buildConfigField "String", "TAG_NAME", "\"development\""
            buildConfigField "String", "BUILD_INFO", "\"Build #${debugBuildInfo.buildNumber} (${debugBuildInfo.buildType})\""
            buildConfigField "boolean", "DEBUG_BUILD", "true"

            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"

            signingConfig signingConfigs.debug

            buildConfigField "boolean", "ENABLE_PROFILER", "true"
            buildConfigField "boolean", "ENABLE_DEBUG_LOGGING", "true"

            manifestPlaceholders = [
                    enableStrictMode: "true",
                    enableDebugTools: "true"
            ]
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += [
                '-Xjvm-default=all',
        ]
    }

    composeOptions {
        //kotlinCompilerExtensionVersion = "1.5.15"
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
        aidl = true
        renderScript = true
        compose = true
    }

    flavorDimensions += "version"
    productFlavors {
        foss {
            dimension "version"
            versionNameSuffix "-foss"
            buildConfigField "String", "FLAVOR_TYPE", "\"foss\""
        }

        full {
            dimension "version"
            isDefault = true
            versionNameSuffix "-full"
            buildConfigField "String", "FLAVOR_TYPE", "\"full\""
        }
    }

    applicationVariants.configureEach { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.configureEach { output ->
                def flavor = variant.flavorName
                def versionName = variant.versionName
                def finalBuildNumber = globalBuildNumber
                outputFileName = "RoxGPS-${versionName}-${flavor}-build${finalBuildNumber}.apk"
            }
        }
    }

    sourceSets {
        named("main") {
            manifest.srcFile("src/main/AndroidManifest.xml")
            java {
                srcDirs("src/main/java")
                srcDir("${protobuf.generatedFilesBaseDir}/main/javalite")
                srcDir("${protobuf.generatedFilesBaseDir}/main/kotlin")
            }
            proto {
                srcDir("src/main/proto")
            }
            aidl {
                srcDir("src/main/aidl")
            }
            res {
                srcDir("src/main/res")
            }
        }
        named("full") {
            java {
                srcDir("src/full/java")
            }
            res {
                srcDir("src/full/res")
            }
        }
        named("foss") {
            java {
                srcDir("src/foss/java")
            }
            res {
                srcDir("src/foss/res")
            }
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:4.31.0'
    }
    plugins {
        kotlin {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:1.4.3:jdk8@jar"
        }
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
    }
    generateProtoTasks {
        all().forEach { task ->
            task.group = "Proto"
            task.description = "Generates Proto source files for ${task.name.replace('generate', '').replace('Proto', '')}"
            task.builtins {
                kotlin { option 'lite' }
                java { option 'lite' }
            }
        }
    }
}

composeCompiler {
    includeSourceInformation = true
    reportsDestination = layout.buildDirectory.dir("compose_compiler")
    stabilityConfigurationFile = rootProject.layout.projectDirectory.file("stability_config.conf")
}

dependencies {
    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.activity.ktx
    implementation libs.fragment.ktx
    implementation libs.preference.ktx
    implementation libs.constraintlayout
    implementation libs.drawerlayout
    implementation libs.material

    implementation libs.room.runtime
    implementation libs.room.ktx
    debugImplementation libs.androidx.ui.test.manifest
    ksp libs.room.compiler

    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.runtime.ktx

    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines

    implementation libs.hilt.android
    ksp libs.hilt.compiler

    implementation libs.timber

    implementation libs.retrofit
    //noinspection UseTomlInstead
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'

    implementation libs.virtual.joystick.android

    implementation libs.androidx.datastore.core
    implementation libs.androidx.datastore.preferences
    implementation libs.datastore
    implementation libs.protobuf.kotlin.lite

    compileOnly libs.api
    compileOnly libs.xposedbridge
    implementation libs.hiddenapibypass

    fossImplementation libs.play.services.location
    fossImplementation libs.android.sdk
    fossImplementation libs.android.plugin.annotation.v9

    fullImplementation libs.gms.play.services.location
    fullImplementation libs.play.services.maps
    implementation(libs.maps.compose)

    implementation platform(libs.compose.bom)

    implementation libs.ui
    implementation libs.ui.graphics
    implementation libs.ui.tooling.preview
    debugImplementation libs.ui.tooling
    implementation libs.material3

    implementation libs.androidx.activity.compose
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.androidx.lifecycle.runtime.compose
    implementation libs.androidx.runtime.livedata
    implementation libs.androidx.runtime

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    androidTestImplementation libs.androidx.ui.test.manifest

    implementation libs.kotlin.stdlib.jdk8
    implementation libs.okhttp
    implementation libs.logging.interceptor

    implementation libs.accompanist.permissions
    implementation libs.androidx.hilt.navigation.compose
    ksp(libs.hilt.android.compiler)
    implementation(libs.androidx.lifecycle.viewmodel.compose)
    implementation libs.androidx.material.icons.extended
    implementation libs.androidx.material.icons.core
    implementation(libs.androidx.core)
}
// Tambahkan konfigurasi KSP
ksp {
    arg("room.schemaLocation", "$projectDir/schemas")
    arg("room.incremental", "true")
    arg("room.expandProjection", "true")
}